---
# Boostrapping Barracuda Web Application Firewall in Azure
# Steps
#  - Wait for login page
#  - Get login token
#  - Configure system settings (Beware: changing the timezone will issue a reboot of the unit)
#  - Add SSL Certificate for services
#  - Configure service and content rules
#  - Add SSL Certificate for MGMT
#  - Configure HTTPS admin access only
#  - Update security policy per content rule and import from template

### WAF Getting ready ###
- name: WAF - Check if login page is ready
  uri: 
    url: http://{{ hostvars[inventory_hostname].ansible_host }}:8000/cgi-mod/index.cgi
    return_content: true
    timeout: 300
  register: response
  until: "'Please enter your administrator login and password' in response.content"
  retries: 60
  delay: 15

- name: WAF - Get login token
  uri:
    url: http://{{ hostvars[inventory_hostname].ansible_host }}:8000/restapi/v3/login
    method: POST
    body: '{"username":"admin", "password":"{{ password }}"}'
    body_format: json
    headers:
      Content-Type: "application/json"
  register: token

#### WAF Create BADSTORE content rule server ###
- include_tasks: waf.yml
  vars:
    request_url: "http://{{ hostvars[inventory_hostname].ansible_host }}:8000/restapi/v3/services/{{ waf_service_name }}/content-rules"
    request_name: "{{ waf_content_rule_badstore_name }}"
    request_body: '{ "access-log": "Enable", "url-match": "/*", "status": "On", "mode": "Active", "name": "{{ waf_content_rule_badstore_name }}", "comments": "{{ waf_content_rule_badstore_comment }}", "web-firewall-policy": "default", "app-id": "{{ waf_service_name }}", "host-match": "{{ waf_content_rule_badstore_hostname }}" }'


- include_tasks: waf.yml
  vars:
    request_url: "http://{{ hostvars[inventory_hostname].ansible_host }}:8000/restapi/v3/services/{{ waf_service_name }}/content-rules/{{ waf_content_rule_badstore_name }}/content-rule-servers"
    request_name: "{{ waf_content_rule_badstore_server_name }}"
    request_body: '{ "backup-server": "No", "status": "In Service", "name": "{{ waf_content_rule_badstore_server_name }}", "port": {{ waf_content_rule_badstore_port }}, "identifier": "IP Address", "weight": 1, "ip-address": "{{ waf_content_rule_badstore_ip_address }}" }'

#### WAF Create BADSTORE content rule ###
#- name: Get {{ waf_content_rule_badstore_name }}  content rule
#  uri:
#    url: http://{{ hostvars[inventory_hostname].ansible_host }}:8000/restapi/v3/services/{{ waf_service_name }}/content-rules/{{ waf_content_rule_badstore_name }}
#    method: GET
#    user: "{{ token.json.token }}"
#    password: ""
#    force_basic_auth: yes
#    headers:
#      Content-Type: "application/json"
#    status_code: 200
#  register: service
#  ignore_errors: True
#- debug:
#    msg: "{{service.json}}"
#
#- name: Create {{ waf_content_rule_badstore_name }}  content rule
#  when: service|failed
#  uri:
#    url: http://{{ hostvars[inventory_hostname].ansible_host }}:8000/restapi/v3/services/{{ waf_service_name }}/content-rules
#    method: POST
#    user: "{{ token.json.token }}"
#    password: ""
#    force_basic_auth: yes
#    body: '{ "access-log": "Enable", "url-match": "/*", "status": "On", "mode": "Active", "name": "{{ waf_content_rule_badstore_name }}", "comments": "{{ waf_content_rule_badstore_comment }}", "web-firewall-policy": "default", "app-id": "{{ waf_service_name }}", "host-match": "{{ waf_content_rule_badstore_hostname }}" }'
#    body_format: json
#    headers:
#      Content-Type: "application/json"
#    status_code: 201
#
#- name: Edit {{ waf_content_rule_badstore_name }} content rule
#  when: service|succeeded
#  uri:
#    url: http://{{ hostvars[inventory_hostname].ansible_host }}:8000/restapi/v3/services/{{ waf_service_name }}/content-rules/{{ waf_content_rule_badstore_name }}
#    method: PUT
#    user: "{{ token.json.token }}"
#    password: ""
#    force_basic_auth: yes
#    body: '{ "access-log": "Enable", "url-match": "/*", "status": "On", "mode": "Active", "name": "{{ waf_content_rule_badstore_name }}", "comments": "{{ waf_content_rule_badstore_comment }}", "web-firewall-policy": "default", "app-id": "{{ waf_service_name }}", "host-match": "{{ waf_content_rule_dvwa_hostname }}" }'
#    body_format: json
#    headers:
#      Content-Type: "application/json"
#    status_code: 200