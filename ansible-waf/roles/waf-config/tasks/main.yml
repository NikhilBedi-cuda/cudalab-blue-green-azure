---
# Boostrapping Barracuda Web Application Firewall in Azure
# Steps
#  - Wait for login page
#  - Get login token
#  - Configure system settings (Beware: changing the timezone will issue a reboot of the unit)
#  - Add SSL Certificate for services
#  - Configure service and content rules

### WAF Getting ready ###
- name: WAF - Check if login page is ready
  uri: 
    url: http://{{ hostvars[inventory_hostname].ansible_host }}:8000/cgi-mod/index.cgi
    return_content: true
    timeout: 300
  register: response
  until: "'Please enter your administrator login and password' in response.content"
  retries: 60
  delay: 15

### WAF Auth Token ###
- include_tasks: waf-get-token.yml
  vars:
    request_url: "{{ waf_base_url }}"

### WAF Configure system settings ###
- include_tasks: waf-edit-item-reboot.yml
  vars:
    request_comment: "Configure system settings"
    request_url: "{{ waf_base_url }}"
    request_path: "/restapi/v3/system"
    request_body: '{ "device-name": "{{ waf_device_name }}", "hostname": "{{ inventory_hostname }}", "domain": "{{ waf_domain }}", "time-zone": "{{ waf_timezone }}" }'

### WAF SSL Certificate ###
- name: "WAF - Get SSL certificate"
  uri:
    url: "{{ waf_base_url }}/restapi/v3/certificates/{{ waf_certificate_name }}"
    method: GET
    user: "{{ waf_token.json.token }}"
    password: ""
    force_basic_auth: yes
    headers:
      Content-Type: "application/json"
    status_code: 200
  register: sslcert
  ignore_errors: True
- debug:
    msg: "{{sslcert}}"

- name: "WAF - Upload certificate"
  when: sslcert|failed
  shell: 'curl  -X "POST" "{{ waf_base_url }}/restapi/v3/certificates?upload=signed" \
                -H "accept: application/json" -u "{{ waf_token.json.token }}:" \
                -H "Content-Type: multipart/form-data" \
                -F "name={{ waf_certificate_name }}" \
                -F "type=pkcs12" \
                -F "key_type=rsa" \
                -F "signed_certificate=@{{ waf_certificate_location }};type=application/x-pkcs12" \
                -F "assign_associated_key=no" \
                -F "allow_private_key_export=yes" \
                -F "password={{ waf_certificate_password }}"'
  register: curl
- debug:
    msg: "{{curl}}"

- debug: var=curl.stdout_lines

### WAF Create HTTPS service
- include_tasks: waf-create-edit-item.yml
  vars:
    request_comment: "Create HTTPS service"
    request_url: "{{ waf_base_url }}"
    request_path: "/restapi/v3/services"
    request_name: "{{ waf_service_name }}"
    request_body: '{"name":"{{ waf_service_name }}", "ip-address":"{{ waf_service_ip_address }}", "port":"{{ waf_service_port }}", "type":"HTTP", "address-version":"ipv4", "vsite":"default", "group":"default"}'

### WAF Configure SSL encryption HTTPS Service
- include_tasks: waf-edit-item.yml
  vars:
    request_comment: "Configure SSL encryption HTTPS Service"
    request_url: "{{ waf_base_url }}"
    request_path: "/restapi/v3/services/{{ waf_service_name }}/ssl-security"
    request_body: '{ "enable-sni": "No", "status": "On", "certificate": "{{ waf_certificate_name }}", "enable-ssl-3": "No", "enable-tls-1-1": "No", "enable-hsts": "No", "enable-tls-1-2": "Yes", "include-hsts-sub-domains": "Yes", "enable-pfs": "Yes", "enable-tls-1": "No" }'
    body_format: json

#### WAF Create PORTAL content rule ###
- include_tasks: waf-create-edit-item.yml
  vars:
    request_comment: "Create PORTAL content rule"
    request_url: "{{ waf_base_url }}"
    request_path: "/restapi/v3/services/{{ waf_service_name }}/content-rules"
    request_name: "{{ waf_content_rule_portal_name }}"
    request_body: '{ "access-log": "Enable", "url-match": "/*", "status": "On", "mode": "Active", "name": "{{ waf_content_rule_portal_name }}", "comments": "{{ waf_content_rule_portal_comment }}", "web-firewall-policy": "default", "app-id": "{{ waf_service_name }}", "host-match": "{{ waf_content_rule_portal_hostname }}" }'

#### WAF Create PORTAL content rule server ###
- include_tasks: waf-create-edit-item.yml
  vars:
    request_comment: "Create PORTAL content rule server"
    request_url: "{{ waf_base_url }}"
    request_path: "/restapi/v3/services/{{ waf_service_name }}/content-rules/{{ waf_content_rule_portal_name }}/content-rule-servers"
    request_name: "{{ waf_content_rule_portal_server_name }}"
    request_body: '{ "backup-server": "No", "status": "In Service", "name": "{{ waf_content_rule_portal_server_name }}", "port": {{ waf_content_rule_portal_port }}, "identifier": "IP Address", "weight": 1, "ip-address": "{{ waf_content_rule_portal_ip_address }}" }'

#### WAF Create BADSTORE content rule ###
- include_tasks: waf-create-edit-item.yml
  vars:
    request_comment: "Create BADSTORE content rule"
    request_url: "{{ waf_base_url }}"
    request_path: "/restapi/v3/services/{{ waf_service_name }}/content-rules"
    request_name: "{{ waf_content_rule_badstore_name }}"
    request_body: '{ "access-log": "Enable", "url-match": "/*", "status": "On", "mode": "Active", "name": "{{ waf_content_rule_badstore_name }}", "comments": "{{ waf_content_rule_badstore_comment }}", "web-firewall-policy": "default", "app-id": "{{ waf_service_name }}", "host-match": "{{ waf_content_rule_badstore_hostname }}" }'

#### WAF Create BADSTORE content rule server ###
- include_tasks: waf-create-edit-item.yml
  vars:
    request_comment: "Create BADSTORE content rule server"
    request_url: "{{ waf_base_url }}"
    request_path: "/restapi/v3/services/{{ waf_service_name }}/content-rules/{{ waf_content_rule_badstore_name }}/content-rule-servers"
    request_name: "{{ waf_content_rule_badstore_server_name }}"
    request_body: '{ "backup-server": "No", "status": "In Service", "name": "{{ waf_content_rule_badstore_server_name }}", "port": {{ waf_content_rule_badstore_port }}, "identifier": "IP Address", "weight": 1, "ip-address": "{{ waf_content_rule_badstore_ip_address }}" }'

#### WAF Create DVWA content rule ###
- include_tasks: waf-create-edit-item.yml
  vars:
    request_comment: "Create DVWA content rule"
    request_url: "{{ waf_base_url }}"
    request_path: "/restapi/v3/services/{{ waf_service_name }}/content-rules"
    request_name: "{{ waf_content_rule_dvwa_name }}"
    request_body: '{ "access-log": "Enable", "url-match": "/*", "status": "On", "mode": "Active", "name": "{{ waf_content_rule_dvwa_name }}", "comments": "{{ waf_content_rule_dvwa_comment }}", "web-firewall-policy": "default", "app-id": "{{ waf_service_name }}", "host-match": "{{ waf_content_rule_dvwa_hostname }}" }'

#### WAF Create DVWA content rule server ###
- include_tasks: waf-create-edit-item.yml
  vars:
    request_comment: "Create DVWA content rule server"
    request_url: "{{ waf_base_url }}"
    request_path: "/restapi/v3/services/{{ waf_service_name }}/content-rules/{{ waf_content_rule_dvwa_name }}/content-rule-servers"
    request_name: "{{ waf_content_rule_dvwa_server_name }}"
    request_body: '{ "backup-server": "No", "status": "In Service", "name": "{{ waf_content_rule_dvwa_server_name }}", "port": {{ waf_content_rule_dvwa_port }}, "identifier": "IP Address", "weight": 1, "ip-address": "{{ waf_content_rule_dvwa_ip_address }}" }'

#### WAF Create COLORS content rule ###
- include_tasks: waf-create-edit-item.yml
  vars:
    request_comment: "Create COLORS content rule"
    request_url: "{{ waf_base_url }}"
    request_path: "/restapi/v3/services/{{ waf_service_name }}/content-rules"
    request_name: "{{ waf_content_rule_colors_name }}"
    request_body: '{ "access-log": "Enable", "url-match": "/*", "status": "On", "mode": "Active", "name": "{{ waf_content_rule_colors_name }}", "comments": "{{ waf_content_rule_colors_comment }}", "web-firewall-policy": "default", "app-id": "{{ waf_service_name }}", "host-match": "{{ waf_content_rule_colors_hostname }}" }'

#### WAF Create COLORS content rule server 1 ###
- include_tasks: waf-create-edit-item.yml
  vars:
    request_comment: "Create COLORS content rule server 1"
    request_url: "{{ waf_base_url }}"
    request_path: "/restapi/v3/services/{{ waf_service_name }}/content-rules/{{ waf_content_rule_colors_name }}/content-rule-servers"
    request_name: "{{ waf_content_rule_colors_server_name_1 }}"
    request_body: '{ "backup-server": "No", "status": "In Service", "name": "{{ waf_content_rule_colors_server_name_1 }}", "port": {{ waf_content_rule_colors_port_1 }}, "identifier": "IP Address", "weight": 1, "ip-address": "{{ waf_content_rule_colors_ip_address_1 }}" }'

#### WAF Create COLORS content rule server 2 ###
- include_tasks: waf-create-edit-item.yml
  vars:
    request_comment: "Create COLORS content rule server 2"
    request_url: "{{ waf_base_url }}"
    request_path: "/restapi/v3/services/{{ waf_service_name }}/content-rules/{{ waf_content_rule_colors_name }}/content-rule-servers"
    request_name: "{{ waf_content_rule_colors_server_name_2 }}"
    request_body: '{ "backup-server": "No", "status": "In Service", "name": "{{ waf_content_rule_colors_server_name_2 }}", "port": {{ waf_content_rule_colors_port_2 }}, "identifier": "IP Address", "weight": 1, "ip-address": "{{ waf_content_rule_colors_ip_address_2 }}" }'

#### WAF Create COLORS content rule server 3 ###
- include_tasks: waf-create-edit-item.yml
  vars:
    request_comment: "Create COLORS content rule server 3"
    request_url: "{{ waf_base_url }}"
    request_path: "/restapi/v3/services/{{ waf_service_name }}/content-rules/{{ waf_content_rule_colors_name }}/content-rule-servers"
    request_name: "{{ waf_content_rule_colors_server_name_3 }}"
    request_body: '{ "backup-server": "No", "status": "In Service", "name": "{{ waf_content_rule_colors_server_name_3 }}", "port": {{ waf_content_rule_colors_port_3 }}, "identifier": "IP Address", "weight": 1, "ip-address": "{{ waf_content_rule_colors_ip_address_3 }}" }'

### WAF SERVICE CREATION - HTTP ###
#- name: Create a HTTP Service
#  uri:
#    url: http://{{ hostvars[inventory_hostname].ansible_host }}:8000/restapi/v3/services
#    method: POST
#    user: "{{ token.json.token }}"
#    password: ""
#    force_basic_auth: yes
#    body: '{"name":"HTTP", "ip-address":"172.16.137.4", "port":"80", "type":"http", "address-version":"ipv4", "vsite":"default", "group":"default"}'
#    body_format: json
#    headers:
#      Content-Types: "application/json"
#    status_code: 201
#  register: svcname
#- debug:
#  msg: "{{svcname.json}}"

### WAF SERVICE CREATION - HTTP ###
#- name: Add Web Server to HTTP Service
#  uri:
#    url: http://{{ hostvars[inventory_hostname].ansible_host }}:8000/restapi/v3/services/HTTP/servers
#    method: POST
#    user: "{{ token.json.token }}"
#    password: ""
#    force_basic_auth: yes
#    body: '{"name":"docker", "ip-address":"172.16.138.4", "port":"8000", "address-version":"ipv4", "comments":"This is a comment"}'
#    body_format: json
#    headers:
#      Content-Types: "application/json"
#    status_code: 201
#  register: svcname
#- debug:
#  msg: "{{svcname.json}}"

### WAF SERVICE CREATION - HTTP ###
#- name: Create a HTTP Service
#  uri:
#    url: http://{{ hostvars[inventory_hostname].ansible_host }}:8000/restapi/v3/services/HTTPS
#    method: DELETE
#    user: "{{ token.json.token }}"
#    password: ""
#    force_basic_auth: yes
#    headers:
#      Content-Types: "application/json"
#    status_code: 202
#  register: svcname
#- debug:
#  msg: "{{svcname.json}}"

